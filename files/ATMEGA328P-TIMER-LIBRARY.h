#include <avr/io.h>
#include <avr/interrupt.h>
#include "avr-macros.h"

#ifndef AVRTIMER_H
#define AVRTIMER_H

/*
ISR (TIMER0_OVF_vect)
{	
}

ISR (TIMER0_COMPA_vect)
{	
}

ISR (TIMER0_COMPB_vect)
{	
}

ISR (TIMER1_OVF_vect)
{	
}

ISR (TIMER1_COMPA_vect)
{	
}

ISR (TIMER1_COMPB_vect)
{	
}

ISR (TIMER1_CAPT_vect)
{	
}

ISR (TIMER2_OVF_vect)
{	
}

ISR (TIMER2_COMPA_vect)
{	
}

ISR (TIMER2_COMPB_vect)
{	
}
*/

enum T_COM //com is short for compare output mode
{
	T_COM_DISCONNECT,
	T_COM_TGL_ON_MATCH,
	T_COM_CLR_ON_MATCH,
	T_COM_SET_ON_MATCH
};

enum T_PRESCALER
{
	T_PRESCALER0, //0
	T_PRESCALER1,
	T_PRESCALER8,
	T_PRESCALER64,
    T_PRESCALER256,
	T_PRESCALER1024, //5
	T_EXTERNAL_CLOCK_FALLING,
	T_EXTERNAL_CLOCK_RISING
};

enum T0_MODES
{
	T0_MODE_NORMAL,         //0
	T0_MODE_PHASE_CORRECT,
	T0_MODE_CTC_OCR0A,
	T0_MODE_FAST_PWM,
	T0_MODE_RESERVED4,
	T0_MODE_PHASE_CORRECT_OCR0A,
	T0_MODE_RESERVED6,
	T0_MODE_FAST_PWM_OCR0A   //7
};

enum T2_MODES
{
	T2_MODE_NORMAL,         //0
	T2_MODE_PHASE_CORRECT,
	T2_MODE_CTC_OCR0A,
	T2_MODE_FAST_PWM,
	T2_MODE_RESERVED4,
	T2_MODE_PHASE_CORRECT_OCR0A,
	T2_MODE_RESERVED6,
	T2_MODE_FAST_PWM_OCR0A   //7
};

enum T1_MODES
{
	T1_MODE_NORMAL,         //0
	T1_MODE_PHASE_CORRECT_8BIT,
	T1_MODE_PHASE_CORRECT_9BIT,
	T1_MODE_PHASE_CORRECT_10BIT,	
	T1_MODE_CTC_OCR1A,
	T1_MODE_FAST_PWM_8BIT,
	T1_MODE_FAST_PWM_9BIT,
	T1_MODE_FAST_PWM_10BIT,
	T1_MODE_PHASE_FREQUENCY_CORRECT_ICR1,
	T1_MODE_PHASE_FREQUENCY_CORRECT_OCR1A,
	T1_MODE_PHASE_CORRECT_ICR1,
	T1_MODE_PHASE_CORRECT_OCR1A,
	T1_MODE_CTC_ICR1,
	T1_MODE_TIMER1_RESERVED13,
	T1_MODE_FAST_PWM_ICR1,
	T1_MODE_FAST_PWM_OCR1A  //15
};

#define COMA_OFFSET 6
#define COMB_OFFSET 4

#define TIMER_MASK_PRESCALER 0x07
#define TIMER_MASK_ENUM      0x03 
#define TIMER_MASK_MODE      0x04
#define TIMER_MASK_MODE_MSB  0x04

#define TIMER_MASK_MODE_LOW   0x03
#define TIMER_MASK_MODE_HIGH  0x0C

#define OC1A PB1
#define OC1B PB2
#define OC0A PD6
#define OC0B PD5

#define ENABLE_INT_COMB 1
#define ENABLE_INT_COMA 1
#define ENABLE_INT_OVF  1

#define DISABLE_INT_COMB 0
#define DISABLE_INT_COMA 0
#define DISABLE_INT_OVF  0

/*******************************
Functions
*********************************/

inline void  TIMER0_OUTPUT(enum T_COM COMA, enum T_COM COMB, enum T0_MODES MODE) 
{
	 TCCR0A = (COMA<<COMA_OFFSET) | (COMB<<COMB_OFFSET) | (MODE); 	
}

inline void TIMER0_PRESCALER(enum T_PRESCALER PRESCALER, enum T0_MODES MODE)
{
	TCCR0B =  PRESCALER | (MODE<<1);
}

inline void TIMER0_INTERRUPT_ENABLE(bool COMPARE0B, bool COMPARE0A, bool OVERFLOW0)  
{ 
	TIMSK0 = (COMPARE0B<<2) | (COMPARE0A<<1) | (OVERFLOW0);
}
//--------------------------------------------------------------------------------------------
inline void  TIMER1_INIT_CONFIG(enum T_COM COMA, enum T_COM COMB, enum T1_MODES MODE)
{
	TCCR1A = (COMA<<COMA_OFFSET) | (COMB<<COMB_OFFSET) | (MODE&TIMER_MASK_MODE_LOW);
	TCCR1B = (MODE&TIMER_MASK_MODE_HIGH)<<1;
}

inline void TIMER1_INTERRUPT_ENABLE(bool COMPARE1B, bool COMPARE1A, bool OVERFLOW1)
{
	TIMSK1 = (COMPARE1B<<2) | (COMPARE1A<<1) | (OVERFLOW1);
}

inline void TIMER1_PRESCALER(enum T_PRESCALER PRESCALER)
{
	TCCR1B |=  PRESCALER;
}
//--------------------------------------------------------------------------------------------
inline void  TIMER2_OUTPUT(enum T_COM COMA, enum T_COM COMB, enum T2_MODES MODE)
{
	TCCR2A = (COMA<<COMA_OFFSET) | (COMB<<COMB_OFFSET) | (MODE);
}

inline void TIMER2_PRESCALER(enum T_PRESCALER PRESCALER, enum T2_MODES MODE)
{
	TCCR2B =  PRESCALER | (MODE<<3);
}

inline void TIMER2_INTERRUPT_ENABLE(bool COMPAREB, bool COMPAREA, bool OVERFLOW2)
{
	TIMSK2 = (COMPAREB<<2) | (COMPAREA<<1) | (OVERFLOW2);
}

inline void TIMER1_DISABLE_PRESCALER(void)
{
	TCCR1B &=~TIMER_MASK_PRESCALER;
}

#endif

/*
#define TIMER0_ENABLE(PRESCALER) TCCR0B = (TCCR0B&~TIMER_MASK_PRESCALER) | PRESCALER
#define TIMER1_ENABLE(PRESCALER) TCCR1B = (TCCR1B&~TIMER_MASK_PRESCALER) | PRESCALER
#define TIMER2_ENABLE(PRESCALER) TCCR2B = (TCCR2B&~TIMER_MASK_PRESCALER) | PRESCALER
*/

/*******************************
Informative Messages
*********************************/
//#pragma message "COM0B - TGL_ON_MATCH only works in CTC and NON-PWM modes, use DISCONNECT if not using CLR/SET_ON_MATCH"
//#pragma message "COM0A - TGL_ON_MATCH only works if using modes that DON'T use OCRA as top (AKA varying the frequency)"
//#pragma message "In 8 bit modes, if COM0A is used as TOP, then it will be disabled as an output"
/*
TIMER0_OUTPUT();
TIMER0_PRESCALER();
TIMER0_INTERRUPT_ENABLE();

TIMER1_OUTPUT();
TIMER1_PRESCALER();
TIMER1_INTERRUPT_ENABLE();

TIMER2_OUTPUT();
TIMER2_PRESCALER();
TIMER2_INTERRUPT_ENABLE();
*/


/*

#define TIMER0_OUTPUT(enum T_COM COM0A, enum T_COM COM0B, enum T0_MODES MODE)  TCCR0A = ((COM0A&TIMER0_ENUM_MASK)<<COM0A_OFFSET) | ((COM0B&TIMER0_ENUM_MASK)<<COM0B_OFFSET) | (MODE&TIMER0_ENUM_MASK)
#define TIMER0_PRESCALER(enum T_PRESCALER PRESCALER, enum T0_MODES MODE) TCCR0B =  PRESCALER | ((MODE&TIMER0_MODE_MSB_MASK)<<1)
#define TIMER0_INTERRUPT_ENABLE(bool COMPARE0B, bool COMPARE0A, bool OVERFLOW0)   TIMSK0 = (COMPARE0B<<2) | (COMPARE0A<<1) | (OVERFLOW0)

#define TIMER1_OUTPUT(enum TIMER_COM COM1A, enum TIMER_COMCOM1B, enum T1_MODES MODE)  TCCR1A = ((COM1A&TIMER0_ENUM_MASK)<<COM0A_OFFSET) | ((COM1B&TIMER0_ENUM_MASK)<<COM0B_OFFSET) | (MODE&TIMER0_ENUM_MASK)
#define TIMER1_PRESCALER(enum T_PRESCALER PRESCALER, enum T1_MODES MODE) TCCR1B =  PRESCALER | ((MODE&TIMER1_PRESCALER_MASK)<<1)
#define TIMER1_INTERRUPT_ENABLE(bool COMPARE1B, bool COMPARE1A, bool OVERFLOW1)   TIMSK1 = (COMPARE1B<<2) | (COMPARE1A<<1) | (OVERFLOW1)


#define TIMER2_OUTPUT(enum T_COM COM2A, enum T_COM COM2B, enum T2_MODES MOD)  TCCR2A = ((COM2A&TIMER0_ENUM_MASK)<<COM0A_OFFSET) | ((COM2B&TIMER0_ENUM_MASK)<<COM0B_OFFSET) | (MODE&TIMER0_ENUM_MASK)
#define TIMER2_PRESCALER(enum T_PRESCALER PRESCALER, enum T2_MODES MODE) TCCR2B =  PRESCALER | ((MODE&TIMER0_MODE_MSB_MASK)<<1)
#define TIMER2_INTERRUPT_ENABLE(bool COMPARE2B, bool COMPARE2A, bool OVERFLOW2)   TIMSK2 = (COMPARE2B<<2) | (COMPARE2A<<1) | (OVERFLOW2)

#define TIMER0_MODE(x) if(x>=4){ TCCR0A = x&TIMER0_MODE_MASK_TCCR0A; TCCR0B = ((x&TIMER0_MODE_MASK_TCCR0B)<<1);} else{TCCR0A = x&TIMER0_MODE_MASK_TCCR0A;}
#define TIMER0_PRESCALER_BIT(x) TCCR0B |= x;
#define OCR0B_DISCONNECT() OCR0B &=~ 0x30

TCCR0B CLR TIMER0_PRESCALER_MASK;
TIMER0_INIT_PRESCALER(1);
TCCR0B = (TCCR0B&=~TIMER0_PRESCALER_MASK)|PRESCALER1024;
*/