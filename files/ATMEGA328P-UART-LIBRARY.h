

#include <avr/io.h>
#include "avr-macros.h"

#ifndef ATMEGA328P_UART_LIBRARY_H
#define ATMEGA328P_UART_LIBRARY_H

#define UART_BAUDRATE 115200

#define UART_NORMAL_BAUDRATE (F_CPU / (16*UART_BAUDRATE)) - 1
#define UART_DOUBLE_BAUDRATE (F_CPU / ( 8*UART_BAUDRATE)) - 1

/*
#if UART_NORMAL_BAUD < 0
#pragma message 
#endif
#if UART_DOUBLE_BAUD <  0
#pragma message "BAUDRATE for double speed not achieveable"
#endif 
*/

enum UART_MODE_ENUM
{
	UART_ASYNC,
	UART_SYNC,
	UART_MODE_RESERVED,
	UART_MASTER_SPI
};

enum UART_PARITY_ENUM
{
	UART_PARITY_DISABLE,
	UART_PARITY_RESERVED,
	UART_PARITY_EVEN,
	UART_PARITY_ODD
};
enum UART_STOP_ENUM
{
	UART_STOP_1BIT,
	UART_STOP_2BIT
};

enum UART_CHAR_SIZE_ENUM
{
	UART_CHAR_SIZE_5BIT,
	UART_CHAR_SIZE_6BIT,
	UART_CHAR_SIZE_7BIT,
	UART_CHAR_SIZE_8BIT,
	UART_CHAR_RESERVED0,
	UART_CHAR_RESERVED1,
	UART_CHAR_RESERVED2,
	UART_CHAR_SIZE_9BIT
};
enum UART_CLOCK_POLARITY_ENUM
{
	UART_RISING_EDGE, // for async, always leave as one
	UART_FALL_EDGE
};

enum UART_INT
{
	UART_INT_DISABLE,
	UART_INT_ENABLE
	
};

#define UART_RX_INT_ENABLE  1
#define UART_RX_INT_DISABLE 0

#define UART_TX_INT_ENABLE  1
#define UART_TX_INT_DISABLE 0

#define UART_UDR_INT_ENABLE  1
#define UART_UDR_INT_DISABLE 0

#define UART_RX_ENABLE  1
#define UART_RX_DISABLE 0

#define UART_TX_ENABLE  1
#define UART_TX_DISABLE 0


#define UART_CHAR_SIZE_MASKC  0x03
#define UART_CHAR_SIZE_OFFSETC   1

#define UART_CHAR_SIZE_MASKB  0x04
#define UART_CHAR_SIZE_OFFSETB   2

#define UART_DDR DDRD
#define UART_RX_PIN_MASK 0
#define UART_TX_PIN_MASK 1


#define UART_CONFIG_TX_PIN() UART_DDR &=~ (1<<UART_RX_PIN_MASK)
#define UART_CONFIG_RX_PIN() UART_DDR |=  (1<<UART_TX_PIN_MASK)

void uart_tx(char data);
char uart_rx(void);

#define UART_INIT_BAUDRATE(BAUDRATE) UBRR0 = BAUDRATE

#define UART_INIT_DOUBLE_SPEED() UCSR0A = (1<<U2X0)

inline void UART_INIT_CONFIGB(bool RX_INT_ENABLE, bool TX_INT_ENABLE, bool DR_EMPTY_INT, bool RX_ENABLE, bool TX_ENABLE,enum UART_CHAR_SIZE_ENUM CHAR_SIZE)
{
	UCSR0B = (RX_INT_ENABLE<<7)|(TX_INT_ENABLE<<6) | (DR_EMPTY_INT<<5) | (RX_ENABLE<<4) | (TX_ENABLE<<3)| ((CHAR_SIZE&UART_CHAR_SIZE_MASKB)<<UART_CHAR_SIZE_OFFSETB);
}

inline void UART_INIT_CONFIGC(enum UART_PARITY_ENUM PARITY, enum UART_STOP_ENUM STOP_SIZE, enum UART_CHAR_SIZE_ENUM CHAR_SIZE)
{
	UCSR0C =  (PARITY<<4) | (STOP_SIZE <<3) | ((CHAR_SIZE&UART_CHAR_SIZE_MASKC)<<UART_CHAR_SIZE_OFFSETC);
}

/*
	UART_INIT_BAUDRATE(UART_BAUDRATE_DOUBLE_SPEED);
	UART_INIT_DOUBLE_SPEED();
	UART_INIT_CONFIGB(UART_RX_INT_DISABLE,UART_TX_INT_DISABLE,UART_DR_EMPTY_INT_DISABLE,UART_RX_ENABLE,UART_TX_ENABLE,UART_CHAR_SIZE_8BIT);
	UART_INIT_CONFIGC(UART_PARITY_DISABLE,UART_STOP_1BIT, UART_CHAR_SIZE_8BIT);
*/


#endif